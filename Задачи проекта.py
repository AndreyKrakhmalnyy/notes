# ___________________________________________________________________________________________________________________________
# Задачи:
# ___________________________________________________________________________________________________________________________
# 28.12.2023-11.01.2024
   
# - Старт проекта.
# - Понять какие файлы и директории для чего служат в django.
# - Завести БД postgres (подключение + создание моделей, таблиц).

# Если позволяет время и успеваешь:
# - Познакомиться с админкой.
# - Вывести информацию в админ панель из таблиц.



# ___________________________________________________________________________________________________________________________
# Задачи:
# ___________________________________________________________________________________________________________________________
# 11.01.2024

# - понять как выгружать проект на github --> (ВЫПОЛНИЛ)
# - создать новый Джанго проект и понять как его именовать --> (ВЫПОЛНИЛ)
#   (посмотреть репозитории на github или gitlab), затем выгрузить на гитхаб --> (ВЫПОЛНИЛ)
  
# - по БД - переименовать таблицы и понять какие таблицы нужно создать --> (ВЫПОЛНИЛ)
#   затем эти таблицы связать через «foreigh key», также добавить --> (ВЫПОЛНИЛ) - ЗАДАТЬ ВОПРОС ПО ТИПУ СВЯЗИ
#   в таблицу “Users” столбец с датой регистрации пользователя “created_at” --> (ВЫПОЛНИЛ)
  
# - реализовать авторизацию через JWT, посмотреть также как реализуется авторизация через email

Что уже выполнил:
    
    1. В папке 'django' создал окружение 'venv', рядом с ним создал django-проект 'pharm_app'
    2. В 'pharm_app' внутреннюю папку с таким же именем переименовал в 'core', чтобы понимать какое
       приложения является главным
    3. Создал приложения: 
        # - приложение с основными страницами сайта ('pages');
        # - приложение отвечающее за авторизацию пользователя ('authorization');
        # - приложение с заказами препаратов на сайте ('orders');
        # - приложения для оплаты препарата на сайте ('payment')
       В 'pharm_app' создал все эти приложения через команду 'django-admin startapp <...>'.
       
       ВАЖНО: При переименовании внутренней папки на 'core' необходимо также поменять импорты с 'pharm_app' на 
              'core', либо просто переименовывать внешнюю папку.
    4. В корневой папке провел инициализацию 'git', отметил все файлы и отправил на 'GitHub'.
    4. Также в каждой из них создал папки для шаблонов и стилей по структуре:
        # (<имя приложения>/<'static' или 'templates'>/<имя приложения>/<файл.html или файл.css>)
    5. Также дополнительно создал 'Makefile' для быстрого запуска локального сервера, установил в окружение
       'django', 'tree' и 'psycopg2'.
    6. Создал в корневой папке файл '.gitignore' для файла 'Makefile'.
    7. Создал таблицы 'Users' и 'BirthPlace', связал их связью 'OneToOne' c параметром 'on_delete', зарегистрировал 
       их в 'admin.py'.
    8. Далее провел миграции и создал админку (Admin, abemuH44!)
    9. Установил компоненты для JWT:
        # pip install djangorestframework           
        # pip install djangorestframework-jwt     
        # pip install djangorestframework-simplejwt
    10. Добавил в 'settings.py' следующую строку:
        
        # REST_FRAMEWORK = {
        # 'DEFAULT_AUTHENTICATION_CLASSES': (
        #     'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # ),
        # }
    
 
Вопросы:
    
    # 1. При создании проекта создаётся 2 папки с одинаковым именем (внешняя папка и внутренняя с файлами). 
    #    Какую из этих папок можно переименовывать без проблем с зависимостями? (Верно ли, что внешнюю)

    # 2. Верный ли тип связи между таблицами указал (вместо 'Foreigh_Key' указал 'OneToOne, так как один пользователь
    #    имеет одно место рождения).
    
    # 3. По процедуре авторизации и бронирования с оплатой.
    
    

Заметки по процедуре авторизации и бронирования с оплатой:
    
    Авторизация - имя, фамилия, почта, пароль. После введения приходит смс на почту с кодом для входа.
    Бронирование и оплата - выбор препарата, выбор адреса, оплата онлайн (отправка чека на почту с указание сроков
        получения) или при получении, затем получение случайного 5-значного кода на странице сайта после выбора типа оплаты 
        для того, чтобы сообщить его фармацевту.
    
    Со стороны фармацевта: он получает сообщение имени, фамилии, кода, списка препаратов, статус оплаты: оплачен онлайн или
        при получении с суммой заказа.
        
    Со стороны клиента: если оплатил онлайн --> предъявляет код, имя и фамилию - получает заказ, иначе предъявляет код, имя, 
    фамилию и оплачивает на месте.
        
    Минусы - клиент может забыть код и закрыть страницу с кодом, а значит его нужно где-то хранить, 
        например в профиле в истории заказов.
    
        
        
        
